name: Run CI
on: [push, pull_request]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry>=1.1.13
        poetry config virtualenvs.in-project true
        poetry install
        source .venv/bin/activate
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
      if: runner.os == 'Linux' || runner.os == 'macOS'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry>=1.1.13
        poetry config virtualenvs.in-project true
        poetry install
        .venv\Scripts\activate.ps1
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
      if: runner.os == 'Windows'

    - name: Run flakeheaven (flake8)
      run: |
        flakeheaven lint src/lava tests/

  security-lint:
    name: Security Lint Code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry>=1.1.13
        poetry config virtualenvs.in-project true
        poetry install
        source .venv/bin/activate
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
      if: runner.os == 'Linux' || runner.os == 'macOS'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry>=1.1.13
        poetry config virtualenvs.in-project true
        poetry install
        .venv\Scripts\activate.ps1
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
      if: runner.os == 'Windows'

    - name: Run bandit    
      uses: tj-actions/bandit@v5.1
      with:
        targets: |
          src/lava/.      
        options: "-r  --format custom --msg-template '{abspath}:{line}: {test_id}[bandit]: {severity}: {msg}'"

  unit-tests:
    name: Unit Test Code + Coverage
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry>=1.1.13
        poetry config virtualenvs.in-project true
        poetry install
        source .venv/bin/activate
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
      if: runner.os == 'Linux' || runner.os == 'macOS'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry>=1.1.13
        poetry config virtualenvs.in-project true
        poetry install
        .venv\Scripts\activate.ps1
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
      if: runner.os == 'Windows'

    - name: Run unit tests
      run: |
        pytest
