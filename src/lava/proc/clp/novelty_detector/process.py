# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
# See: https://spdx.org/licenses/

from lava.magma.core.process.ports.ports import InPort, OutPort
from lava.magma.core.process.process import AbstractProcess


class NoveltyDetector(AbstractProcess):
    """Novelty detection process.
    This process detect the mismatch between the input injection to the
    system and the output generation by the systems. If the system processes
    an input, but does not generate an output (i.e. all the Prototype
    neurons are silent) during a given time window after the beginning of
    the input processing, then NoveltyDetector process will generate a
    signal. This signal means that a novel (unknown) input is detected.

    Parameters
        ----------
        t_wait : int
            The amount of time the process will wait after receiving
            signal about input injection to the system before sending out
            novelty detection signal. If in this time window the system (the
            Prototype neurons) generates an output, then the process will be
            reset and NO novelty detection signal will be sent out.
        n_protos: int
            The number of prototypes that this novelty detector process can
            target. Each time a novel input is detected the next unallocated
            prototype will be targeted by the output of the NoveltyDetector
            process.
    """

    def __init__(self, *,
                 t_wait: int,
                 n_protos: int,
                 ) -> None:
        super().__init__(t_wait=t_wait, n_protos=n_protos)

        # An input is being processed by the system
        self.input_aval_in = InPort(shape=(1,))

        # An output is generated by the system
        self.output_aval_in = InPort(shape=(1,))

        # OutPort for sending out the novelty detection signal
        self.novelty_detected_out = OutPort(shape=(n_protos,))
